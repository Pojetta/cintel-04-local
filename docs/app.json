[{"name": "app.py", "content": "from shiny import reactive\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_widget, render_plotly\nimport seaborn as sns\n\n\n# Load the penguins dataset\npenguins = load_penguins()\n\n# Define a color map to fix specific colors for each species\ncolor_map = {\n    \"Adelie\": \"darkorange\",  # Replacing the hex code with \"darkorange\"\n    \"Gentoo\": \"purple\",      # Replacing the hex code with \"purple\"\n    \"Chinstrap\": \"#1b7978\"     # Replacing the hex code with \"cyan4\"\n}\n\n\n# Set up the UI options\nui.page_opts(title=\"Pojetta and the Penguin Plots\", fillable=True)\n\n# ADD A SIDEBAR\nwith ui.sidebar(\n    open=\"open\"\n): \n    ui.h2(\"Sidebar\")  # Sidebar header\n\n    # Dropdown menu selected attribute\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Attributes\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Numeric input for Plotly histogram\n    ui.input_numeric(\"plotly_bin_count\", \"Bin Count (Plotly Histogram)\", 75, min=1, max=100)\n\n    # Slider input for Seaborn\n    ui.input_slider(\n        \"seaborn_bin_count\", \"Bin Count (Seaborn Histogram)\", 5, 100, 75\n    )\n\n    # Checkbox to filter species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select a Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n\n    # Dividing line\n    ui.hr()\n\n    # Hyperlink to GitHub repo\n    ui.h5(\"GitHub Repo\")\n    ui.a(\n        \"cintel-04-data\",\n        href=\"https://github.com/Pojetta/cintel-04-data\",\n        target=\"_blank\",\n    )\n\n# Main content layout\nwith ui.nav_panel(\"Plots\"):\n\n    with ui.layout_columns():\n\n        # Display the Seaborn Histogram (showing all species)\n        with ui.card(full_screen=True):\n            ui.card_header(\"Seaborn Histogram\")\n            @render.plot\n            def seaborn_histogram():\n                ax = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(), \n                color = \"#1b7978\"\n            )\n                ax.set_title(\"Palmer Penguins\")\n                ax.set_xlabel(input.selected_attribute())\n                ax.set_ylabel(\"Count\")\n                return ax\n            \n    with ui.layout_columns():         \n    \n        # Display the Plotly Histogram\n        with ui.card(full_screen=True):\n            ui.card_header(\"Plotly Histogram\")\n            @render_plotly\n            def plotly_histogram():\n                return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n                color_discrete_map=color_map\n            )    \n\n        # Display the Plotly Scatterplot (showing selected species)\n        with ui.card(full_screen=True):\n            ui.card_header(\"Plotly Scatterplot\")\n            @render_plotly\n            def plotly_scatterplot():\n                return px.scatter(\n                    data_frame=filtered_data(),  \n                    x=\"body_mass_g\",\n                    y=\"bill_length_mm\",\n                    color=\"species\",\n                    labels={\n                        \"bill_length_mm\": \"Bill Length (mm)\",\n                        \"body_mass_g\": \"Body Mass (g)\",\n                    },\n                    color_discrete_map=color_map\n                )\n        \nwith ui.nav_panel(\"Data\"): \n\n    # Display Data Table (showing all data)\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        def data_table():\n            return render.DataTable(filtered_data())\n\n\n    # Display Data Grid (showing all data)\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(filtered_data())\n        \nwith ui.nav_panel(\"Meet The Penguins\"):\n    # Display the image\n    ui.img(\n        src=\"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n        alt=\"Meet the Palmer Penguins\"\n        )\n    # Add the artist credit text under the image\n    ui.p(\"Artwork by @allison_horst\", style=\"font-style: italic; font-size: 14px;\")\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Reactive function to filter data\n@reactive.Calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    if selected_species:\n        return penguins[penguins['species'].isin(selected_species)]\n    return penguins  # Return all data if no species are selected", "type": "text"}]